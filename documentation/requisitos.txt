


Objetivo Principal: Construir um aplicativo de controle financeiro pessoal chamado "Bufunfa". A primeira fase será uma aplicação Web, com planos para uma versão móvel no futuro. O aplicativo deve permitir que os usuários gerenciem suas finanças pessoais e conjuntas de forma intuitiva e detalhada.
Agentes Especialistas e Suas Responsabilidades:
Você atuará como uma equipe de especialistas virtuais. A seguir, a definição de cada agente e suas responsabilidades:
Agente Gerente de Produto:
Você é responsável por traduzir os requisitos de negócio em funcionalidades claras e épicos de desenvolvimento.
Você definirá o fluxo do usuário, as regras de negócio e priorizará o backlog de funcionalidades, garantindo que o produto final atenda às necessidades descritas.
Você deve garantir que a lógica de provisionamento, rateio e consolidação de faturas seja implementada conforme especificado.
Agente Arquiteto de Soluções:
Você definirá a arquitetura geral da solução, garantindo escalabilidade, segurança e manutenibilidade.
Sua responsabilidade é garantir que o backend, o frontend e o banco de dados se comuniquem de forma eficiente e segura.
Você supervisionará as escolhas tecnológicas e a estrutura do projeto, incluindo a preparação para funcionalidades futuras como relatórios e importação de dados.
Agente Engenheiro de Backend (.NET):
Você desenvolverá uma API RESTful robusta utilizando .NET 8 (ou a versão estável mais recente).
Implementará toda a lógica de negócio, incluindo:
Autenticação de usuários via Google OAuth2.
CRUD (Criar, Ler, Atualizar, Deletar) para contas, lançamentos (despesas/receitas), e categorias.
Lógica para despesas recorrentes, parceladas e esporádicas.
Mecanismo de provisionamento e atualização de valores.
Consolidação de faturas de cartão de crédito.
Gestão de contas conjuntas e o cálculo de rateio de saldos.
Utilizará o Entity Framework Core como ORM para interagir com o banco de dados.
Agente Engenheiro de Frontend (Angular):
Você desenvolverá uma interface de usuário (UI) moderna, responsiva e intuitiva utilizando Angular (versão estável mais recente) e TypeScript.
Implementará os seguintes componentes e telas:
Tela de login com integração Google.
Dashboard principal exibindo o saldo consolidado, resumo do mês e próximos vencimentos.
Telas para gerenciamento de contas (principais, cartões de crédito, conjuntas).
Formulários para cadastro de lançamentos (despesas e receitas) com todas as suas variações (recorrente, parcelada, etc.).
Visualização de extrato por conta, com filtros por período.
Interface para gerenciar contas conjuntas e configurar os percentuais de rateio.
Você consumirá a API .NET para todas as operações de dados.
Agente Administrador de Banco de Dados (DBA):
Você projetará e implementará o esquema do banco de dados utilizando PostgreSQL.
O modelo de dados deve suportar todas as entidades e seus relacionamentos: Usuários, Contas, Lançamentos, Categorias, ContasConjuntas, Rateios, etc.
Você criará os scripts de migração (usando Entity Framework Core Migrations) e garantirá que as consultas sejam otimizadas para performance.
Requisitos Técnicos e de Arquitetura:
Backend: .NET 8, API RESTful, Entity Framework Core.
Frontend: Angular, TypeScript, HTML5, CSS (utilizar um framework como Angular Material ou Bootstrap para agilizar).
Banco de Dados: PostgreSQL.
Autenticação: Login social com Google (OAuth2).
Estrutura do Projeto: Siga as melhores práticas para organização de projetos .NET (ex: Clean Architecture) e Angular (módulos, componentes, serviços). Utilize o código-base inicial do repositório GitHub como referência, mas sinta-se livre para refatorar e melhorar a estrutura.
Detalhamento das Funcionalidades (MVP - Mínimo Produto Viável):
1. Gestão de Usuário:
*   Cadastro e login exclusivamente via conta Google.
*   O único dado de perfil necessário inicialmente é o nome do usuário.
2. Gestão de Contas:
*   O usuário pode cadastrar múltiplas contas. Tipos de conta: "Conta Corrente/Principal" e "Cartão de Crédito".
*   Conta Principal: Possui um saldo inicial.
*   Cartão de Crédito: Possui campos para "Data de Fechamento" e "Data de Vencimento". Lançamentos não podem ser adicionados a um mês de fatura após a data de fechamento. O saldo total da fatura fechada deve ser lançado como uma única despesa na conta principal do usuário na data de vencimento.
3. Gestão de Lançamentos:
*   Receitas: Podem ser recorrentes (ex: Salário) ou esporádicas.
*   Despesas:
*   Recorrentes: Valor provisionado que se repete mensalmente (ex: Aluguel, Energia). O usuário pode editar o valor real do mês corrente sem alterar o provisionamento dos meses futuros. Apenas o valor final importa para o cálculo do saldo.
*   Parceladas: Uma despesa com valor fixo que se repete por um número definido de meses (ex: "Compra Notebook - 3/12").
*   Esporádicas: Ocorrem uma única vez.
*   Provisionamento de "Mercado": Funciona como uma despesa recorrente com valor provisionado. O usuário lança despesas esporádicas categorizadas como "Mercado", e o sistema deve mostrar o total gasto real versus o provisionado para o mês. O valor que impacta o saldo final é o gasto real.
4. Contas Conjuntas e Rateio:
*   Um usuário pode convidar outro usuário (via email associado à conta Google) para compartilhar uma conta.
*   Ao criar/editar a conta conjunta, os usuários definem o percentual de rateio (ex: 60% para o usuário A, 40% para o usuário B).
*   Ambos os usuários podem visualizar o extrato e adicionar lançamentos à conta conjunta.
*   A conta conjunta terá uma "data de apuração" mensal.
*   Na data de apuração:
*   Se o saldo for negativo (devedor), um lançamento de despesa será criado automaticamente na conta principal de cada usuário, respeitando o percentual de rateio.
*   Se o saldo for positivo (credor), os usuários podem pré-configurar a conta para:
1.  Manter o saldo na conta conjunta para o próximo mês.
2.  Distribuir o valor como uma receita na conta principal de cada usuário, respeitando o percentual de rateio.
5. Visão Geral e Dashboard:
*   A tela inicial deve apresentar um resumo do saldo de todas as contas.
*   Deve mostrar uma projeção do saldo para o final do mês corrente e para os meses futuros, considerando todos os lançamentos provisionados e recorrentes.
Plano de Ação Sugerido:
Setup do Projeto: Crie a estrutura dos projetos (solução .NET e workspace Angular) e configure o repositório Git.
Modelagem do BD: Projete o esquema do PostgreSQL e configure as migrações iniciais com o EF Core.
Backend (API):
Implemente a autenticação com Google.
Crie os endpoints CRUD para Contas e Lançamentos (simples, sem lógicas complexas inicialmente).
Implemente as lógicas de negócio: recorrência, parcelamento, consolidação de fatura e rateio.
Frontend (UI):
Desenvolva os componentes de UI (telas, formulários, etc.).
Integre com a API para exibir e manipular os dados.
Foque em um fluxo de usuário limpo e funcional.
Foco em Funcionalidades Futuras:
A arquitetura deve ser pensada para facilitar a implementação futura de:
Relatórios e gráficos de despesas por categoria.
Definição de metas financeiras.
Importação de extratos bancários (OFX/PDF).

Refinamento de requisitos

	Um lançamento pode ser do tipo 
		
	Despesa Esporádica - Tem um lançamento pontual no mês corrente em uma data unica e não se propaga nos meses subsequentes. Tem um valor provisionado e um valor real que é debitado da conta na data especificada. O valor é debitado do saldo quando a despesa for realizada.

	Despesa Recorrente - Tem lançamentos recorrentes na mesma data para os próximos meses, por exemplo, todo dia 5 do mês.Tem um valor provisionado e um valor real que é debitado da conta na data especificada do mes. O valor é debitado do saldo quando a despesa for realizada. 

	Receitas Esporádica - Tem um lançamento pontual no mês corrente em uma data unica e não se propaga nos meses subsequentes.Tem um valor provisionado e um valor real que é creditado da conta na data especificada. O valor é creditado no saldo quando a receita for realizada.

	Receitas Recorrente - Tem lançamentos recorrentes na mesma data para os próximos meses, por exemplo, todo dia 5 do mês. Tem um valor provisionado e um valor real que é creditado da conta na data especificada do mes. O valor é creditado no saldo quando a receita for realizada.
	
	Despesas parceladas - Tem lançamentos conforme forem o número de parcelas, ela possui uma data inicial, potanto ela tem
	lancamentos recorrentes nos N mêses os quais forem as quantidades de suas parcelas. Geralmente o valor provisionado é igual ao valor real, o valor real pode aumentar caso o usuário pague a parcela com atraso ou multa. O valor é debitado do saldo quando a despesa for realizada.
	
	Receitas parceladas - Tem lançamentos conforme forem o número de parcelas, ela possui uma data inicial, potanto ela tem lancamentos recorrentes nos N mêses os quais forem as quantidades de suas parcelas. Geralmente o valor provisionado é igual ao valor real, o valor real pode aumentar caso o usuário receba a parcela com atraso ou multa. O valor é creditado no saldo quando a receita for realizada.

Os usuário farão o controle financeiro mês a mês, portando quando uma folha de mês é a berta, todos os lançamentos devem ser listados nesse mês. Ex. Vamos abrir a folha de controle do mes Agosto de 2025. 
	- O Saldo do mês da conta principal inicia-se com o saldo do fechamento do mês anterior.
	- Todas as despesas recorrentes devem ser cadastradas/listadas nesse novo mês.
	- Todas as receitas recorrentes devem ser cadastradas/listadas nesse novo mês. 
	- Todas as despesas parceladas devem ser cadastradas/listadas nesse novo mês caso suas parcelas ainda prevalecam para o mes atual.
	- Todas as receitas recorrentes devem ser cadastradas/listadas nesse novo mês caso suas parcelas ainda prevalecam para o mes atual.
	
A folha de mes também tem um valor de saldo real e um valor de saldo provisionado, ou seja, o valor de saldo provisionado é a soma de todas as receitas do mês menos todas as despesas do mês e assim como os valores provisionados, o saldo real é a soma de todas as receitas  realizadas menos todas as despesas realizadas.

o usuário podera abrir os mêses futuros para ver o como estará o provisionamento de suas receitas e despesas, deve se considerar que o saldo de um determinado mês inicia-se com o saldo do mês anterior
	

	
	
		
		
	Vamos atuar nos modelos de contas,  que foram criadas Conta e ContaConjunta, e isso esta refletido no banco de dados. Não é a melhor abordagem. Vamos atuar na correção dessa modelagem de contas.
	
	Vamos utilizar a abordagem de herenças e orientação a objetos, juntamente com princípios SOLID para remodelar essa parte do projeto. 
	Uma conta pode ser um tipo genêrico e derivar para outros. Conta Corrente, Conta Poupança, Conta Cartão de Crédito, Conta Conjunta, Conta Investimento e outras possíveis especializações de contas que possam a vir existir. Um usuário pode ter várias contas, uma conta conjunta pode pertencer a 2 ou mais usuários.

	Uma conta básica ela tem um saldo, um usuário proprietário, ela pode ter  associada a ela Lançamentos que acontecem em uma determinada data do mês. Lançamentos podem ser do tipo Receita ou Despesa, os lançamentos podem ser recorrentes, ou seja, se repentem sempre ou durante um periodo de tempo. Por exemplo Lançamentos diarios, semanais, quinzenais, N em N dias até uma determinada data, ou uma quantidade de vezes (parcelas). Lançamentos podem ser do tipo Receita, ou Despesa. Uma Conta tem associada a ela uma Folha que representa o mês do ano. Quando o usuáiro abre a Folha de um determinado Mes/Ano, todos os lançamentos dessa conta devem ser registrados em suas respectivas datas. Tome como conhecimento base estas inforações sobre os Lançamentos, mas o seu objetivo agora é fazer as alterações necessárias para regularizar os modelos de Conta. Os lançamentos serão tratados mais adiante.
	
	Uma conta do tipo Cartão de crédito terá outros atributos como data de vencimento, juros e multa e outras propriedades ainda não mapeadas. Uma conta Corrente pode ser responsável por N Contas do tipo Cartão de Crédito, o saldo devedor de uma conta de crédito em uma determinada Folha Mes/Ano é lançanado como despesa na conta corrente responsável na data do vencimento do cartão de crédito na Folha do mesmo Mes/Ano referente. Novamente são informações que você deve considerar como base de conhecimento, mas, seu objetivo é a modelagem das classes de Conta.
	
	
	
	Da mesma forma que fizemos com os modelos de Contas, agora vamos atuar nos modelos de Lançamentos. Vamos utilizar a abordagem de herenças e orientação a objetos, juntamente com princípios SOLID para remodelar esses modelos no projeto. 
	
	Lançamentos podem ser do tipo Receita, ou Despesa. Já sabe-se que uma Conta tem associada a ela uma Folha que representa o mês do ano, quando o usuário abre a Folha de um determinado Mes/Ano, todos os lançamentos dessa conta devem ser registrados em suas respectivas datas. Somente os Lançamentos esporádicos são feitos diretamente na folha mes/ano. 
	Lançamentos são do tipo Esporádicos, Recorrentes, Parcelados e Periódicos. Lançamentos esporádicos o usuário lança diretamente na Folha do mês vigente para uma determinada conta. Lançamentos Recorrentes ocorrem todo dia X de um determinado mês. Lançamentos Parcelados ocorrem todo dia X de um determinado mês, sendo X sua data inicial, e se repentem nos N mêses seguintes sendo N igual a quantidade de parcelas que essse lançamento tem. Lançamentos Periódicos vão possuir uma subclassificação onde o usuário pode configurar sua perriodicidade sendo ela Semanal, Quinzenal, Mensal, Anual ou o usuário pode escolher de N em N dias. Com excessão do lançamento esporádico, todo lançamento pode ter ou não uma data final que se for definida, a partir dessa data eles não mais serão lançados nas Folhas do Mes/Ano na qual a data supera essa data final. Para os Lançamentos parcelados suas datas finais serão automaticamente atribuídas. Existirão regras para o cadastro de novos lançamentos parcelados cuja as parcelas já estão em andamento, onde o usuário irá decidir se o fechamento das folhas dos mêses anteriores deve receber o registro dessas parcelas em andamento, consequentemente uma atualização de saldo retroativa, ou não se somente os mêses atuais futuros serão impactados pelo novo lançamento parcelado. Mas esta regra servirá so de base de conhecimento e será tratada com melhores especificações mais adiante. O seu objetivo agora e cuidar da refatoração dos modelos de Lançamentos.
	Tome essas informações a atue na refatoração necessária, inclusive banco de dados e migrações, para contemplar esses requisitos.
		
		
	Vamos agora especifiar os modelos de Folha. Uma folha é onde serão lançados todos os lançamentos de uma conta, cada conta terá uma folha para cada mês, portanto ao se criar uma conta automáticamente a folha do mês atual é criada para essa conta. Se um lançamento esporádico for lançado para essa conta, e a data do lançamento corresponde ao mês dessa folha, esse lançamento é feito diretamente nessa folha na data do lançamento. Se um novo Lançamento Recorrente for criado para esta conta e sua data inicial for correpondente ao mês dessa folha, ele deve ser lançado nessa folha na data inicial informada. Se um novo lançamento Parcelado for criado para essa conta e a data inicial for correspondente ao mês dessa folha, ele deve ser lançado nessa folha na data inicial informada. Se um um novo Lançamento Periodico foi criado para essa conta e a configuração de Periodicidade for semanal e sua data inicial for correspondente ao mês dessa folha, ele deve ser lançado nessa folha no exato dia da data inicial, e nas próximas datas dessa folha onde Data Inicial + 7 forem correspondentes ao mês dessa folha. Se um novo Lançamento Periodico for criado para essa conta e a configuração de Periodicidade for Quinzenal, e sua data inicial for correspondente ao mês dessa folha, ele deve ser lançado nessa folha no exato dia da sua data inicial, e no mesmo dia da semana duas semanas a frente se essa data futura corresponder ao mês dessa folha. Ou seja, se ele for lançado em uma sexta feira deste mês, pula-se a sexta feira da próxima semana e lança-se ele na sexta feira da semana subsequente, se essa sexta feira ainda pertencer ao mês atual. Se um novo Lançamento Periódico Mensal for criado para esta conta e sua data inicial for corresponde ao mês dessa folha, ele deve ser lançado nessa folha na data inicial informada. Se um novo Lançamento for criado para essa conta e sua configuração de Periodicidade for Personalizada, e a data inicial dele for correspondente ao mês dessa folha, ele deve ser lançadao na data inicial, e nas demais datas onde Data inicial + Intervalo de dias ainda estiverem dentro do mês correspondente ao mês atual. 
	
	O usuário pode criar Folhas de mêses futuros, justamente para poder visualizar a suas projeções de lançamentos e sua situação financeira (saldo) no futuro, portanto ele pode abrir a folha do próximo mês. Quando isso acontecer, uma nova folha deve ser criada para o próximo mês. Todos os Lançamentos Recorrentes dessa conta devem ser lançados para essa nova folha respeitando o dia do mês da sua data inicial. Todos os lançamentos Parcelados dessa conta devem ser lançados respeitando o dia do mês da data inicial, somente se as parcelas ainda são remanescentes para o mes atual pois pode ser o caso de um usuário abrir uma folha de mês na qual a ultima parcela tenha sido paga no mês anterior. E assim por conseguinte, todas as lógicas dos Lançamentos Periódigos que existirem para essa conta, devem ser executadas e aplicadas para serem lançadas corretamente no mês referente a folha na qual está sendo aberta. 
	
	Sua responsabilidade é analisar os modelos de folha implementados no sistema a fim de criticar essas regras de negôcio, fazer os agistes necessários nos modélos e lógica de validação/negôcio e inserção no banco de dados. Tenha sempre os princícios SOLID, clean code e aproveitamento de hierarquia de classes, heranças, injeção de dependência (se necessário) a aplicação de padrôes de projeto para que o código fique adequado.
	
	Agora vamos refinar os requisitos da Conta Conjunta. Talvez os requisitos que serão refinados aqui já estão contemplatos na implementação atual, cabe análise para constatar a necessidade de modificações. Uma conta dessas terá 2 ou mais usuários relacionados a ela, significa que estes usuário tem participação nessa conta, se for uma conta que gera despesas mensais, ela deve ser rateada entre os usuário respeitando o percentual de rateio de cada usuário, se for uma conta que gera receitas, da mesma forma deve ser distribuidos entre os usuários participantes respeitando o rateio. O usuário criador da conta inicialmente é o administrador da conta, é ele quem faz a gestão e configura qual será o modelo de distribuição, pois no caso de lucro na data de fechamento combinada/configurada ele poderá configurar a conta para manter o saldo em conta sem distribuição automática, no caso de saldo negativo ele também pode optar por manter os saldo negativo sem reatear automáticamente as despesas da conta entre os usuários. Ele configura qual será a data de fechamento e também poderá configurar quais usuários poderão ter acesso a essa conta (leitura), por exemplo se um usuário podera ver os lancamentos dessa conta, um outro nível de permissão para os usuários poderem editar os lançamentos dessa cota conjunta. A distruibuição da receita/despesa automática significa que a conta fará de uma forma automática a efetivação dos rateios mas deixe esse requisito de lado para um maior refinamento no futuro. Por hora vamos trabalhar a distribuição na forma de lançamentos, assim como o lançamento das contas genéricas tem um valor real e provisionado, a conta conjunta também têm (benefício de herança OOP). Então o saldo provisionado para uma determinada folha/mes dessa conta deve aparecer na folha/mes da conta principal de cada usuário dessa conta já rateado no percentual correto na data de fechamento combinada/configurada. Sendo assim cada usuário quando abrir sua folha/mes de sua conta, terá a visibilidade do valor que deve pagar ou receber provisionado na data combinada. Assim como uma conta genérica, a conta conjunta também pode ter contas do tipo cartão de crédito relacionadas a ela, e assim como contas conjuntas, as contas de cartão de crédito podem tem um ou mais usuários. Utilize o benefício da orientação a objeto para esta finalidade. Uma conta conjunta pode ter uma conta de cartão de crétido e esse cartão de crédito pode ser administrado/usado por um usuário dessa conta, ou por N usuários, desde que esses N usuários façam parte dos usuários dessa conta conjunta. Assim como na vida real as depesas/receitas de um cartão de crédito compartilhado entre usuários são centralizados em uma unica fatura e pagos de uma forma unificada, no caso do aplicativo bufunfa as despesas/receitas do cartão de credito serão lançadas de uma forma unificada na folha/mes da conta conjunta na data de vencimento do cartão permitindo que cada usuário, que possua a devida permissão, possa ver o provisionamento dessa despesa lançada na folha/mes da conta conjunta. Esse funcionamento da conta do tipo cartão de crédito é o mesmo para o caso de um usuário que tenha uma conta (que não é conjunta) e possui uma conta de cartão de crédito relacionada a sua conta principal. Novamente devemos nos beneficiar do modelos de OOP para reaproveitamento de lógica/código. 
	
	Faça a análise destes requisitos, se necessário faça questionamentos, avalie o código implementado atualmente e atue na refatoração de ela for necessário, ou das novas implementações se elas forem necessárias.